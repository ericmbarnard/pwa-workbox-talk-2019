{
    // http://eslint.org/docs/rules/

    "env": {
        "node": true,
    },

    "globals": {
        "workbox": true,
        "Promise": true,
        "Set": true,

        "Chart": true,

        "describe": true,
        "test": true,
        "it": true,
        "expect": true,
        "jest": true,
        "beforeEach": true,
        "afterEach": true,
        "beforeAll": true,
        "afterAll": true
    },

    "parserOptions": {
        "allowImportExportEverywhere": true,
        "ecmaVersion": 9,
        "sourceType": "module"
    },

    "rules": {
        ////////// Possible Errors //////////

        // disallow trailing commas in object literals
        "comma-dangle": 0,

        // disallow assignment in conditional expressions
        "no-cond-assign": [2,"always"],

        // disallow use of console (off by default in the node environment)
        "no-console": 1,

        // disallow use of constant expressions in conditions
        "no-constant-condition": 2,

        // disallow use of debugger
        "no-debugger": 2,

        // disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,

        // disallow assigning to the exception in a catch block
        "no-ex-assign": 2,

        // disallow unnecessary parentheses (off by default)
        "no-extra-parens": 0,

        // disallow unnecessary semicolons
        "no-extra-semi": 1,

        // disallow overwriting functions written as function declarations
        "no-func-assign": 2,

        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": [2, "both"],

        // disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 2,

        // disallow negation of the left operand of an in expression
        "no-negated-in-lhs": 2,

        // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-obj-calls": 2,

        // disallow sparse arrays
        "no-sparse-arrays": 2,

        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,

        // disallow comparisons with the value NaN
        "use-isnan": 2,

        // Ensure JSDoc comments are valid (off by default)
        "valid-jsdoc": 0,

        // Ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,


        ////////// Best Practices //////////

        // treat var statements as if they were block scoped (off by default)
        "block-scoped-var": 2,

        // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "complexity": 0,

        // require return statements to either always or never specify values
        "consistent-return": [0],

        // specify curly brace conventions for all control statements
        "curly": [2, "all"],

        // require default case in switch statements (off by default)
        "default-case": 0,

        // encourages use of dot notation whenever possible
        // Turning off as this complains with promise chains:
        //  doSomethingAsync()
        //    .finally(...)
        "dot-notation": 0,

        // require the use of === and !==
        "eqeqeq": 2,

        // make sure for-in loops have an if statement (off by default)
        "guard-for-in": 0,

        // disallow the use of alert, confirm, and prompt
        "no-alert": 2,

        // disallow use of arguments.caller or arguments.callee
        "no-caller": 2,

        // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-div-regex": 0,

        // disallow else after a return in an if (off by default)
        "no-else-return": 1,

        // disallow comparisons to null without a type-checking operator (off by default)
        "no-eq-null": 2,

        // disallow use of eval()
        "no-eval": 2,

        // disallow adding to native types
        "no-extend-native": 0,

        // disallow unnecessary function binding
        "no-extra-bind": 0,

        // disallow fallthrough of case statements
        "no-fallthrough": 2,

        // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-floating-decimal": 0,

        // disallow use of eval()-like methods
        "no-implied-eval": 2,

        // disallow usage of __iterator__ property
        "no-iterator": 2,

        // disallow use of labeled statements
        "no-labels": 0,

        // disallow unnecessary nested blocks
        "no-lone-blocks": 2,

        // disallow creation of functions within loops
        "no-loop-func": 1,

        // disallow use of multiple spaces
        "no-multi-spaces": 0,

        // disallow use of multiline strings
        "no-multi-str": 2,

        // disallow reassignments of native objects
        "no-native-reassign": 2,

        // disallows creating new instances of String, Number, and Boolean
        "no-new-wrappers": 2,

        // disallow use of octal literals
        "no-octal": 2,

        // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal-escape": 1,

        // disallow use of process.env (off by default)
        "no-process-env": 0,

        // disallow usage of __proto__ property
        "no-proto": 2,

        // disallow declaring the same variable more than once
        "no-redeclare": [2, { "builtinGlobals": true }],

        // disallow use of assignment in return statement
        "no-return-assign": 2,

        // disallow use of javascript: urls.
        "no-script-url": 2,

        // disallow comparisons where both sides are exactly the same (off by default)
        "no-self-compare": 2,

        // disallow use of comma operator
        "no-sequences": 2,

        // disallow usage of expressions in statement position
        "no-unused-expressions": 2,

        // disallow use of void operator (off by default)
        "no-void": 2,

        // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-warning-comments": 0,

        // disallow use of the with statement
        "no-with": 2,

        // require use of the second argument for parseInt() (off by default)
        "radix": 2,

        // requires to declare all vars on top of their containing scope (off by default)
        "vars-on-top": 2,

        // require immediate function invocation to be wrapped in parentheses (off by default)
        "wrap-iife": 2,

        // require or disallow Yoda conditions
        "yoda": 0,


        ////////// Strict Mode //////////
        // (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
        "global-strict": 0,

        // (deprecated) disallow unnecessary use of "use strict"; when already in strict mode
        "no-extra-strict": 0,

        // controls location of Use Strict Directives
        "strict": 0,


        ////////// Variables //////////
        // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-catch-shadow": 0,

        // disallow deletion of variables
        "no-delete-var": 2,

        // disallow labels that share a name with a variable
        "no-label-var": 0,

        // disallow declaration of variables already declared in the outer scope
        "no-shadow": 2,

        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": 2,

        // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": 2,

        // disallow use of undefined when initializing variables
        "no-undef-init": 2,

        // disallow use of undefined variable (off by default)
        "no-undefined": 0,

        // disallow declaration of variables that are not used in the code
        "no-unused-vars": [1, { "vars": "all", "args": "none" }],

        // disallow use of variables before they are defined
        // but not functions and classes since its nice to put helper functions/classes
        // at bottom of file
        "no-use-before-define": [2, { "functions": false, "classes": false }],


        ////////// Node.js //////////

        // enforces error handling in callbacks (off by default) (on by default in the node environment)
        "handle-callback-err": 2,

        // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-mixed-requires": 0,

        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-new-require": 0,

        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-path-concat": 0,

        // disallow process.exit() (on by default in the node environment)
        "no-process-exit": 0,

        // restrict usage of specified node modules (off by default)
        "no-restricted-modules": 0,

        // disallow use of synchronous methods (off by default)
        "no-sync": 0,


        ////////// Stylistic Issues //////////
        // enforce one true brace style (off by default)
        // Disabling as there's a lot of 1tbs/Stroustrup'
        "brace-style": 0, // [2, "1tbs"],

        // require camel case names
        "camelcase": [2, { "properties": "never" }],

        // enforce spacing before and after comma
        "comma-spacing": [2, { "before": false, "after": true }],

        // enforce one true comma style (off by default)
        "comma-style": [2, "last"],

        // enforces consistent naming when capturing the current execution context (off by default)
        "consistent-this": 0,

        // enforce newline at the end of file, with no multiple empty lines
        "eol-last": [2, "always"],

        // require function expressions to have a name (off by default)
        "func-names": 0,

        // enforces use of function declarations or expressions (off by default)
        "func-style": 0,

        // enforces spacing between keys and values in object literal properties
        "key-spacing": 2,

        // specify the maximum depth callbacks can be nested (off by default)
        "max-nested-callbacks": [2, { "max": 4 }],

        // require a capital letter for constructors
        "new-cap": 0,

        // disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": 2,

        // disallow use of the Array constructor
        "no-array-constructor": 2,

        // disallow comments inline after code (off by default)
        // Disabling as there's a fair amount of this on option declarations:
        // var defaults = {
        //   someOpt1: 0, // explanation
        //   someOpt2: 1, // explanation
        // }
        "no-inline-comments": 0,

        // disallow if as the only statement in an else block (off by default)
        "no-lonely-if": 2,

        // disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": 2,

        // disallow multiple empty lines (off by default)
        "no-multiple-empty-lines": 0,

        // disallow nested ternary expressions (off by default)
        "no-nested-ternary": 2,

        // disallow use of the Object constructor
        "no-new-object": 2,

        // disallow space before semicolon
        "semi-spacing": [2, { "before": false, "after": true }],

        // disallow space between function identifier and application
        "no-spaced-func": 2,

        // disallow the use of ternary operators (off by default)
        "no-ternary": 0,

        // disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 1,

        // disallow dangling underscores in identifiers
        "no-underscore-dangle": 0,

        // allow just one var statement per function (off by default)
        "one-var": 0,

        // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-assignment": 0,

        // enforce padding within blocks (off by default)
        "padded-blocks": [2, "never"],

        // require quotes around object literal property names (off by default)
        "quote-props": [1, "consistent-as-needed"],

        // specify whether double or single quotes should be used
        "quotes": 0,

        // require or disallow use of semicolons instead of ASI
        "semi": 2,

        // sort variables within the same declaration block (off by default)
        "sort-vars": 0,

        // require a space after function names (off by default)
        "space-before-function-paren": [2, { "anonymous": "always", "named": "never" }],

        // require a space after certain keywords (off by default)
        "keyword-spacing": [2, { "before": true, "after": true }],

        // require or disallow space before blocks (off by default)
        "space-before-blocks": 2,

        // require or disallow spaces inside brackets (off by default)
        "space-in-brackets": 0,

        // require or disallow spaces inside parentheses (off by default)
        "space-in-parens": [1, "never"],

        // require spaces around operators
        "space-infix-ops": 2,

        // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "space-unary-ops": [2, { "words": true, "nonwords": false }],

        // require or disallow a space immediately following the // in a line comment (off by default)
        "spaced-comment": [1, "always"],

        // require regex literals to be wrapped in parentheses (off by default)
        "wrap-regex": 0,


        ////////// ECMAScript 6 //////////
        // require let or const instead of var (off by default)
        "no-var": 0,

        // enforce the position of the * in generator functions (off by default)
        "generator-star": 0,


        ////////// Legacy //////////
        // specify the maximum depth that blocks can be nested (off by default)
        "max-depth": [2, { "max": 5 }],

        // specify the maximum length of a line in your program (off by default)
        "max-len": [1, 120],

        // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-params": 0,

        // specify the maximum number of statement allowed in a function (off by default)
        "max-statements": [2, { "max": 40 }, { "ignoreTopLevelFunctions": true }],

        // disallow use of bitwise operators (off by default)
        "no-bitwise": 0,

        // disallow use of unary operators, ++ and -- (off by default)
        "no-plusplus": 2,

        "indent": ["error", 4, { "SwitchCase": 1 }]
    }
}
